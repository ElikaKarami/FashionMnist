# -*- coding: utf-8 -*-
"""Elika's Fashion mnist

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oa8KIrzMojpWKVC_leyAorTnqYd8PWHo

#Fashion MNIST with CNN
"""
import streamlit as st
st.title('Classifying Fahion MNIST with Keras & Deep Learning')
# Commented out IPython magic to ensure Python compatibility.
#Importing required libraries and packages
import tensorflow as tf
import keras
import matplotlib.pyplot as plt
# %matplotlib inline
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical
from keras.models import model_from_json


from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers import Flatten

#import data
fashion = keras.datasets.fashion_mnist

#load data
(X_train, y_train), (X_test, y_test) = fashion.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover','Dress', 'Coat', 'Sandel' ,'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

#show one of the images from the training dataset
plt.figure()
plt.imshow(X_train[24])
plt.colorbar()
st.pyplot()

#visualize input
def visualize_input(img, ax):
    ax.imshow(img, cmap='ocean')
    width, height = img.shape
    thresh = img.max()/2.5
    for x in range(width):
        for y in range(height):
            ax.annotate(str(round(img[x][y],2)), xy=(y,x),
                        horizontalalignment='center',
                        verticalalignment='center',
                        color='white' if img[x][y]<thresh else 'black')

fig = plt.figure(figsize = (12,12)) 
ax = fig.add_subplot(111)
visualize_input(X_train[4444], ax)
plt.title('dress\n',fontweight='bold',fontsize=20)
plt.axis("off")
st.pyplot()

# #data normalization
X_train = X_train / 255.0
X_test = X_test / 255.0

plt.figure(figsize = (10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(X_train[i])
    plt.xlabel(class_names[y_train[i]])
st.pyplot()

X_train = X_train.reshape(X_train.shape[0], 28, 28 , 1 ).astype('float32')
X_test = X_test.reshape(X_test.shape[0], 28, 28 , 1 ).astype('float32')

y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

num_class = y_train.shape[1]
print(num_class)

model = Sequential()
model.add(Conv2D(16, (5,5), strides = (1,1), activation = 'relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size = (2,2), strides = (2,2)))

model.add(Conv2D(8, (5,5), strides = (1,1), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2), strides = (2,2)))

model.add(Flatten())
model.add(Dense(100, activation='relu'))
model.add(Dense(num_class, activation = 'softmax'))
  
model.compile(optimizer = 'adam' , loss = 'categorical_crossentropy', metrics = ['accuracy'])

model.summary()

fit_ = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs = 23 , batch_size = 64, verbose = 2)

scores = model.evaluate(X_test, y_test, verbose= 0)

print("Accuracy: {} \n Error: {}".format(scores[1], 100-scores[1]*100))

plt.plot(fit_.history['accuracy'], linewidth = 4, color = 'lightgreen')
plt.plot(fit_.history['val_accuracy'], linewidth = 4, color = 'violet')
plt.style.use('dark_background')
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.grid(True)
plt.legend(['train', 'test'], loc='upper left')
st.pyplot()

plt.plot(fit_.history['val_loss'], linewidth = 4, color = 'lightblue')
plt.plot(fit_.history['loss'], linewidth = 4, color = 'orange')
plt.style.use('dark_background')
plt.title('Train - Test Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.grid(True)
plt.legend(['validation Loss', 'train Loss'], loc='upper left')
st.pyplot()


import cv2 as cv
image = cv.imread('/home/elika/Desktop/University_project_mnist/highheel.jpg', cv.IMREAD_GRAYSCALE)
image = cv.resize(image , (28, 28))
image = image.astype('float32')
image = image.reshape(1, 28, 28, 1)
image = 255-image
image /= 255

plt.imshow(image.reshape(28, 28),cmap='Greys')



pred = model.predict_classes(image, batch_size=1)
for i in class_names:
    if class_names[i] == pred:
        print (pred , class_names[i])


image_index = 99
plt.imshow(X_test[image_index].reshape(28, 28),cmap='Greys')
pred = model.predict(X_test[image_index].reshape(1, 28, 28, 1))
print(pred.argmax())

        x = image.img_to_array(gray)
        x = np.expand_dims(x, axis=0)
        [predicted] = model.predict(x)
        predicted = predicted.tolist()
        for j in predicted:
            for i in class_names:
                if predicted.index(j) == class_names.index(i) and j==1.0:
                    st.write('The model prediction for this image is : ' + i)





